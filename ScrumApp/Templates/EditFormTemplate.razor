@typeparam TModel where TModel : class

@inject ILogger<EditFormTemplate<TModel>> Logger

@if (Model is not null)
{
    <EditForm EditContext="editContext" OnValidSubmit="ValidSubmit" class="row g-3">
        <DataAnnotationsValidator />
        <CascadingValue Value="FormIsDisabled">
            <fieldset disabled="@FormIsDisabled" class="mb-3">
                @ChildContent
            </fieldset>
        </CascadingValue>

        <div class="edit-toolbar" style="@EditToolbarStyle">
            <div class="row pt-1">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row p-2">
                <div class="col d-flex gap-2">
                    <button type="button" class="btn btn-light" disabled="@isBeginning" @onclick="ToggleEditing">@(isDisabled ? "Edit" : "Cancel")</button>
                    <button type="submit" class="btn btn-primary" disabled="@saveDisabled" @onclick="() => messageStore.Clear()">Save Changes</button>
                </div>
            </div>
        </div>

    </EditForm>
}

@code {
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    //public delegate TModel LoadModel();
    [Parameter, EditorRequired] public Func<TModel> OnLoad { get; set; } = null!;
    //public delegate Task<HttpResponseMessage> SaveModel(TModel model);
    [Parameter, EditorRequired] public Func<TModel, Task<HttpResponseMessage>> OnSave { get; set; } = null!;
    //public delegate Task<bool> BeginEdit();
    [Parameter] public Func<Task<bool>>? OnBeginEdit { get; set; }

    public TModel Model = null!;
    string originalModel = null!;

    EditContext editContext { get; set; } = null!;
    ValidationMessageStore messageStore = null!;

    bool isBeginning;
    bool isDisabled = true;
    bool isPosting = false;
    bool FormIsDisabled => isDisabled;
    bool saveDisabled => isDisabled || isPosting;
    public bool IsEditing => !FormIsDisabled;
    //TODO
    string EditToolbarStyle => false ? "display: none" : "display: block";

    public void InitializeModel()
    {
        Model = OnLoad();
        editContext = new EditContext(Model);
        messageStore = new ValidationMessageStore(editContext);

        originalModel = JsonSerializer.Serialize<TModel>(Model);
    }

    public void RestoreModel()
    {
        // restore form data
        Model = JsonSerializer.Deserialize<TModel>(originalModel)
            ?? throw new InvalidOperationException("Failed to deserialize model data.");

        editContext = new EditContext(Model);
        messageStore = new ValidationMessageStore(editContext);
    }

    async Task ToggleEditing()
    {
        if (isDisabled)
        {
            // clicked Edit

            if (OnBeginEdit is not null) 
            {
                messageStore.Clear();
                editContext.NotifyValidationStateChanged();

                isBeginning = true;
                try
                {
                    if (!await OnBeginEdit())
                        return;
                }
                catch(ScrumAppException ex)
                {
                    messageStore.Clear();
                    messageStore.Add(editContext.Field(""), ex.Message);
                    editContext.NotifyValidationStateChanged();
                    return;
                }
                finally
                {
                    isBeginning = false;
                }
            }
        }

        isDisabled = !isDisabled;

        if (isDisabled)
        {
            // clicked Cancel
            RestoreModel();
        }
    }

    async Task ValidSubmit()
    {
        isPosting = true;
        try
        {
            try
            {
                var response = PostResponse.Create(await OnSave(Model));
                if (response is PostResponse.Success)
                {
                    isDisabled = true;

                    InitializeModel();
                }
                else
                {
                    response.HandlePostFailure(editContext, messageStore);
                }
            }
            catch (HttpRequestException ex)
            {
                Logger.LogError(ex, "Failed to communicate with the server, status code: {statusCode}.", ex.StatusCode);

                messageStore.Clear();
                messageStore.Add(editContext.Field(""), "Failed to communicate with the server.");
                editContext.NotifyValidationStateChanged();
            }
        }
        finally
        {
            isPosting = false;
        }
    }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ChildContent);
        ArgumentNullException.ThrowIfNull(OnSave);
        ArgumentNullException.ThrowIfNull(OnLoad);

        InitializeModel();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("rendering {fr}", firstRender);
    }
}
