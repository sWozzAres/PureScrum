@page "/productbacklogitem/list"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<List> Logger
@inject TabService TabService
@inject ScrumApi.ProductBacklogItemService.ProductBacklogItemServiceClient Client

<PageTitle>Refine</PageTitle>

<PageHeader Title="Product Backlog Items" Icon="@Icon.PBI" ClassName="bi-pbi">
    <SubHeaderContent><h2>Refine</h2></SubHeaderContent>
    <ChildContent>
        <button class="btn btn-primary" @onclick="@(() => isCreating = true)">New</button>
        <button class="btn btn-danger" @onclick="DeleteAsync" disabled="@(isDeleting || (sortedItems is not null && !sortedItems.Any(x=>x.Checked)))">Delete</button>
    </ChildContent>
</PageHeader>
@if (loadFailure)
{
    <div class="alert alert-danger" role="alert">
        Product Backlog Items failed to load.
    </div>
}
else if (sortedItems is not null)
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="row" class="col-width-min"></th>
                                    <th scope="row">Name</th>
                                    <th scope="row">Product</th>
                                    <th scope="row">Sprint</th>
                                    <th scope="row">Estimation</th>
                                    <th scope="row">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in sortedItems)
                                {
                                    var className = string.Join(" ",
                                        circularDependencies.Any(chain => chain.Contains(item.Id)) ? "table-danger" : "",
                                        item.WasMissing ? "opaque" : "");

                                    <tr class="@className" @key="item">
                                        <td><input type="checkbox" @bind-value="@item.Checked" /></td>
                                        <th scope="col">
                                            <HyperLink href="@item.Url()" TabKey="@Pages.ProductBacklogItem.View.TabKey">@item.Name</HyperLink>
                                        </th>
                                        <td>@item.ProductName</td>
                                        <td>@item.SprintName</td>
                                        <td>@item.EstimationPoints</td>
                                        @{
                                            className = item.Status switch
                                            {
                                                ScrumApi.PbiStatus.None => "bg-primary bg-gradient",
                                                ScrumApi.PbiStatus.Ready => "bg-success bg-gradient",
                                                ScrumApi.PbiStatus.Done => "bg-dark bg-gradient",
                                                _ => ""
                                            };
                                        }
                                        <td><span class="badge @className">@item.Status</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@if (deleteFailedMsg is not null)
{
    <NotificationDialog OnClose="@(() => deleteFailedMsg = null)">
        @deleteFailedMsg
    </NotificationDialog>
}
@if (isCreating)
{
    <ScrumApp.Pages.ProductBacklogItem.CreateModal OnClose="@((result) => isCreating = false)" OnCreated="Created" />
}

@code {
    List<ScrumApi.ProductBacklogItem>? sortedItems;
    List<List<string>> circularDependencies { get; set; } = null!;

    string? deleteFailedMsg;
    bool loadFailure;

    bool isCreating;
    async Task Created(CreatedEventArgs<CreateProductBacklogItemRequest> e)
    {
        var result = await e.Response.Content.ReadFromJsonAsync<ProductBacklogItemFullDto>()
                ?? throw new InvalidOperationException("Failed to deserialize.");

        if (e.Open)
        {
            TabService.ResetTabs(ScrumApp.Pages.ProductBacklogItem.View.TabKey);
            Navigation.NavigateTo($"/productbacklogitem/view/{result.Id}");
        }

        sortedItems!.Add(new ScrumApi.ProductBacklogItem(
            result.Id.ToString(),
            e.Model.Name,
            (int)ProductBacklogItemStatusDto.None,
            result.SprintName ?? "",
            result.ProductName,
            0.0f
        ));

        isCreating = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    async Task LoadAsync()
    {
        try
        {
            var items = (await Client.ListAsync(new ScrumApi.ListProductBacklogItemsRequest()
                {
                    Filter = $"ActiveOnly=true",
                    IncludeDependsOn = true,
                })).ProductBacklogItems;

            (sortedItems, circularDependencies) = TopologicalSort.Sort(items);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load product backlog items.");
            loadFailure = true;
        }
    }

    bool isDeleting;
    async Task DeleteAsync()
    {
        isDeleting = true;
        try
        {
            var idsToRemove = sortedItems!.Where(x => x.Checked).Select(x => x.Id);

            var response = await ApiHelpers.DeleteIdsAsync(idsToRemove, Http, "/api/productbacklogitem");
            if (response is PostResponse.Success)
            {
                sortedItems!.RemoveAll(x => idsToRemove.Contains(x.Id));
            }
            else
            {
                deleteFailedMsg = response is PostResponse.BadRequest br
                    ? br.ErrorMessage
                    : "Delete failed!";
            }
        }
        finally
        {
            isDeleting = false;
        }
    }
}
