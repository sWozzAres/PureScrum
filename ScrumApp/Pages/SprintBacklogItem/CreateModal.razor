@inject HttpClient Http

<CreateFormTemplateDialog @ref="form" 
                          OnSave="SaveAsync" OnGetCreateModel="this.OnLoad"
                          OnCreated="OnCreated" OnClose="OnClose" Title="Create Sprint Backlog Item">


    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="form.Model.Name" />
    </div>
    <div class="mb-3">
        <label for="descr" class="form-label">Description</label>
        <InputTextArea id="descr" class="form-control" @bind-Value="form.Model.Description" rows="5" placeholder="How?"/>
    </div>


</CreateFormTemplateDialog>

@code {
    [Parameter, EditorRequired] public EventCallback<bool> OnClose { get; set; }
    [Parameter, EditorRequired] public EventCallback<CreatedEventArgs<CreateSprintBacklogItemRequest>> OnCreated { get; set; }
    [Parameter] public Func<CreateSprintBacklogItemRequest>? OnLoad { get; set; }

    CreateFormTemplateDialog<CreateSprintBacklogItemRequest> form = null!;

    async Task<HttpResponseMessage> SaveAsync(CreateSprintBacklogItemRequest model)
       => await Http.PostAsJsonAsync("/api/sprintbacklogitem", model);

    protected override void OnInitialized()
    {
        if (!OnClose.HasDelegate) throw new ArgumentNullException(nameof(OnClose));
        if (!OnCreated.HasDelegate) throw new ArgumentNullException(nameof(OnCreated));
    }
}
